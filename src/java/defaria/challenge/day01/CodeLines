    Scanner scan = new Scanner(System.in);


    String inputString = scan.nextLine();


	scan.close();



	System.out.println("Hello, World.");
    System.out.println(inputString);


   ------------ ex 2-------------

   String name = "Baldur";
   int a = 4;

       System.out.printf("%-10s%013d", name, a);


________ ex 3____________

        for(int i=0;i<t;i++)
        {

            try
            {
                long x=sc.nextLong();
                System.out.println(x+" can be fitted in:");
                if(x>=-128 && x<=127)System.out.println("* byte");

                if(x > Short.MIN_VALUE && x <= Short.MAX_VALUE)System.out.println("* short");
                if(x > Integer.MIN_VALUE && x <= Int.MAX_VALUE)System.out.println("* int");
                if(x > Long.MIN_VALUE && x < Long.MAX_VALUE)System.out.println("* long");

                //Complete the code
            }
            catch(Exception e)
            {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }

        }

 ------ ex 4 --- reading from stream(EOF)

 public class Solution {

     public static void main(String[] args) {
         int count = 0;
         Scanner n = new Scanner(System.in);

         while(n.hasNext()){
             count++;
             System.out.println(count + " " + n.nextLine());
         }


         /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
     }
 }

 ---------------Initialization Blocks-----------------

 public class Solution {
 //all variables must be static
 }
     static Scanner scan = new Scanner(System.in);
     static boolean flag = true;
     static int B = scan.nextInt();
     static int H = scan.nextInt();
//allows for better manipulation of data
 static{
     try{
         if(B < 0 || H < 0){
         flag = false;
         throw new Exception("Breadth and height must be positive");
         }
     }catch(Exception e){
         System.out.println(e);
     }
 }


 // Write your code here

 public static void main(String[] args){
 		if(flag){
 			int area=B*H;
 			System.out.print(area);
 		}

 	}//end of main

 }//

 --------Working with LocalDate-----------

 public class Main {


     public static void main(String[] args) {
         int month=1;
         int day=15;
         int year=2015;

         LocalDate time = LocalDate.of(year, month, day);

         String DayValue = String.valueOf(time.getDayOfWeek());

         System.out.println(DayValue);

     }

 }

------------String Formatter-----------

        Scanner scanner = new Scanner(System.in);
        System.out.println("Add value: \n");
        double payment = scanner.nextDouble();
        scanner.close();

        Locale indiaLocale = new Locale("en", "IN");
        String india = NumberFormat.getInstance(indiaLocale).format(payment);
        String us = NumberFormat.getInstance(Locale.US).format(payment);
        String china = NumberFormat.getInstance(Locale.CHINA).format(payment);
        String france = NumberFormat.getInstance(Locale.FRANCE).format(payment);


        // Write your code here.

        System.out.println("US: " + us);
        System.out.println("India: " + india);
        System.out.println("China: " + china);
        System.out.println("France: " + france);

 -------------calculating cost----------Math.round


    public static void main(String[] args) {
        int taxes = 7;
        int tip = 15;
        double cost = 39.90;

        solve(cost, tip, taxes);


    }

    public static void solve(double meal_cost, int tip, int taxes){
        double totalAmount = meal_cost + (meal_cost * tip/100) + (meal_cost * taxes/100);
        System.out.println(Math.round(totalAmount));
    }

----------Manipulating String Case----------

public class Solution {

    public static void main(String[] args) {

        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
        sc.close();

        int totalLength = A.length() + B.length();

        System.out.println(totalLength);
        System.out.println(compareStrings(A, B));

        System.out.printf("%s %s", toCamelCase(A), toCamelCase(B));

        /* Enter your code here. Print output to STDOUT. */

    }
    public static String toCamelCase(String string){
        String a = string.substring(1);
        String b = String.valueOf(string.charAt(0)).toUpperCase();

        return b + a;
    }

    public static String compareStrings(String A, String B){
        int comparison = A.compareTo(B);

        if(comparison > 0){
            return "Yes";
        }

        return "No";
    }
}


-------------checking for smallest and largest portion--------

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {

    String sequence = s.substring(0, k);
    String smallest = sequence;
    String largest = sequence;

    // Complete the function

    for(int i = 1; i <= (s.length() - k); i++){
        sequence = s.substring(i, (i + k));

        if(sequence.compareTo(smallest) < 0){
            smallest = sequence;
        }
        if(sequence.compareTo(largest) > 0){
            largest = sequence;
        }
    }


        return smallest + "\n" + largest;

    }
}

-------anagrams -------------

        //first check for their length, if do not match they are not anagrams
        if (a.length() != b.length()) {
            return false;
        }
        // convert both strings to lower case
        a = a.toLowerCase();
        b = b.toLowerCase();
        int sum = 0;
        //creates a loop to run thru all alphabet
        for (char c = 'a'; c <= 'z'; c++) {

        //for loop to run thru each character in string
            for (int i=0; i<a.length(); i++) {
            //if the current character in a matches the character it adds to sum
                if (a.charAt(i) == c) {
                    sum++;
                }
            //if the current character in b matches the character it subtracts from the sum
                if (b.charAt(i) == c) {
                    sum--;
                }
            }
            //if sum is zero when this block is finished it means the characters
           are the same and in same number
            if (sum != 0) {
                return false;
            }
        }
        return true;

--------TESTING STRING FOR REGEX PATTERN----------

import java.util.Scanner;
import java.util.regex.*;

public class Solution
{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		while(testCases>0){
			String pattern = in.nextLine();
            try{
                Pattern.compile(pattern);
                System.out.println("Valid");
            }catch(PatternSyntaxException e){
                System.out.println("Invalid");
            }
            testCases--;
          	//Write your code
		}
	}
}

-------------Hacker Rank String Evens and Odds-----------
public class Solution {


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        String even , odds;



        int numberOfTests = scan.nextInt();
        scan.nextLine();

        for(int i = 0; i < numberOfTests; i++){
            even = odds = "";
            String S = scan.nextLine();
            for(int j = 0; j < S.length(); j++){
                if(j % 2 == 0){
                    even += S.charAt(j);
                }else{
                    odds += S.charAt(j);
                }
            }
            System.out.println(even + " " + odds);
        }
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    }


}

------------My Even and Odds Approach------------

public static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {

        int numberOfTests = getNumberOfCases();
//        loop to get the test string
        queryForStrings(numberOfTests);

    }

    public static int getNumberOfCases(){
        System.out.println("How many test cases?");
        int i = scan.nextInt();
        if(i <= 1 || i >= 10){
            System.out.println("Invalid input. The number of tests must be at least 2. Try again");
            return 0;
        }
        scan.nextLine();
        return i;
    }

    public static void queryForStrings(int numberOfTests){
        String evens, odds;

        for(int i = 0; i < numberOfTests;i++){
            evens = odds = "";

            System.out.println("\nProvide a String: ");
            String newTestString = scan.nextLine();

            if(newTestString.length() <=2 || newTestString.length() >= 10000){
                System.out.println("Invalid entry. String must be at least 3 characters long. Try Again");
                return;
            }

            for(int j = 0; j < newTestString.length(); j++){
                if(j % 2 == 0){
                    evens += newTestString.charAt(j);
                }else{
                    odds += newTestString.charAt(j);
                }

            }
            System.out.println(evens + " " + odds);

        }
    }

---------------Checking for prime number with Big Integers----------

public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String n = reader.readLine();
        reader.close();

        BigInteger a = new BigInteger(n);

        if(a.isProbablePrime(1)){
            System.out.println("prime");
        }else{
            System.out.println("not prime");
        }

    }
}

------------------Adding and multiplying BigIntegers----------
public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        BigInteger a = new BigInteger(reader.readLine());
        BigInteger b = new BigInteger(reader.readLine());

        BigInteger c = a.add(b);
        BigInteger d = a.multiply(b);

        reader.close();

        System.out.println(c);
        System.out.println(d);

    }
}

---------------Working with 2d Arrays-------------
------hourglass sum-----------

public class Solution {
       public static void main(String [] args) {
        Scanner scan = new Scanner(System.in);
        int arr[][] = new int[6][6];
        for (int row = 0; row < 6; row++) {
            for (int col = 0; col < 6; col++) {
                arr[row][col] = scan.nextInt();
            }
        }
        scan.close();

        System.out.println(maxHourglass(arr));
    }
    public static int maxHourglass(int[][] arr){
        // initializes variable max with the minimum value an integer can assume.
        int max = Integer.MIN_VALUE;
        // row < 4 determines the hourglass height to 3 rows
        for(int row = 0; row < 4; row++){
            // determines col no wider than 3 columns guarantees no EOF error
            for (int col = 0; col < 4; col++){
                // call findsum to calculate hourglass values
                int sum = findSum(arr, row, col);
                // compare value found with current max
                max = Math.max(max, sum);
            }
        }
        return max;
    }

    public static int findSum(int[][] arr, int row, int col){
    // sum all value using the hourglass shape
        int sum = arr[row+0][col+0] + arr[row+0][col+1] + arr[row+0][col+2]
                                    + arr[row+1][col+1] +
                  arr[row+2][col+0] + arr[row+2][col+1] + arr[row+2][col+2];

        return sum;
    }

}

----------Sum 1 items and array to match target value----------

class Solution {
    public int[] twoSum(int[] nums, int target) {    return findTotal(nums, target);


    }

    public static int[] findTotal(int[] nums, int target){
        //pointer on first element
        for(int i = 0; i < nums.length - 1; i++){
          //loop over next elements and check for target
            for (int j = i + 1; j < nums.length ; j++){
                //if current on both match target
                if(nums[i] + nums[j] == target){
                    //print string
                    System.out.println("[" + i + "," + j + "]");
                 return new int[]{i,j};
                }
            }
        }
        return null;
    }

}

-------------Map, HashMap----------
class Solution{
    public static void main(String []argh){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        Map<String,Integer> myMap = new HashMap<String,Integer>();
        for(int i = 0; i < n; i++){
            String name = in.next();
            int phone = in.nextInt();
            in.nextLine();
            myMap.put(name, phone);
        }
        while(in.hasNext()){
            String s = in.next();
            if(myMap.get(s) == null)
                System.out.println("Not found");
            else {
                System.out.println(s + "=" + myMap.get(s));
            }
        }
        in.close();
    }
}

--------Factorial---------

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int x = Integer.parseInt(reader.readLine().trim());

        int result = factorial(x);
        System.out.println(result);

    }

    public static int factorial(int n){
        if(n <1){
            return 1;
        }
        return (n * factorial(n -1));
    }
}

__________ convert to binary and return longest sequence _______

       public static void main(String[] args) throws IOException {
            Scanner read = new Scanner(System.in);

            int n = read.nextInt();

            read.close();


            int rem=0,s=0,t=0;

            while(n > 0){
//                takes module
                rem = n % 2;
//                divide number by two
                n = n/2;
//                checks if the remainder is equal 1 to add to count
                if(rem == 1){
//                    adds to count
                    s++;
//                    if s is bigger than t, t gets its value
                    if(s > t){
                        t = s;
                    }
                }else{
                    s = 0;
                }
            }
        }


--------------Convert to binary and display it----------------

public static String convertToBinary(int n) {
    String convertedString = "";

    while(n >= 2){
        if(n % 2 != 0){
            convertedString += "1";
            n = (n -1)/2;
            convertToBinary(n);
        }else{
            convertedString += "0";
            n = n/2;
            convertToBinary(n/2);                }

    }

    return convertedString;

}

public static String adjustBinaryOrder(int n){
    String x = convertToBinary(n);
    String adjustedArray = "";

    if( n  > 100){
        adjustedArray += 1;
    }
    for(int i = x.length() - 1; i >=0; i --){

        adjustedArray += x.charAt(i);
    }
    return adjustedArray;
}

public static int checkForSequence(String s){
    int number = 0;
    int x = 0;

    while(x < s.length()-1){
        if(s.charAt(x) == 1){
            number++;
            x++;
        }
    }


    return number;
}